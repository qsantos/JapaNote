# encoding: utf-8
from aqt import mw
from aqt.qt import *

from .view import formbrowser, window_to_front
from .model import add_notes, word_search
from .searchsettings import SearchSettingsWindow


class SearchEDICTWindow(QMainWindow):
    instance = None

    @classmethod
    def open(cls, pattern=None):
        if cls.instance is None:
            cls.instance = cls(pattern)
        else:
            window_to_front(cls.instance)
        return cls.instance

    def closeEvent(self, evt):
        type(self).instance = None
        self.hide()
        evt.accept()

    def __init__(self, pattern=None):
        QMainWindow.__init__(self)

        if pattern is None:
            pattern = mw.col.conf.get('searchedict_pattern', u'')
        enable_edict = mw.col.conf.get('searchedict_enableEDICT', True)
        enable_deinflect = mw.col.conf.get('searchedict_enableDeinflect', True)
        enable_enamdict = mw.col.conf.get('searchedict_enableENAMDICT', False)

        self.form = formbrowser.Ui_MainWindow()
        self.form.setupUi(self)
        self.form.pattern.setText(pattern)
        self.form.enableEDICT.setChecked(enable_edict)
        self.form.enableDeinflection.setChecked(enable_deinflect)
        self.form.enableENAMDICT.setChecked(enable_enamdict)
        self.form.resultTable.setModel(word_search)

        # events
        self.form.pattern.returnPressed.connect(self.update_search)
        self.form.searchButton.clicked.connect(self.update_search)
        self.form.enableEDICT.clicked.connect(self.update_search)
        self.form.enableDeinflection.clicked.connect(self.update_search)
        self.form.enableENAMDICT.clicked.connect(self.update_search)
        self.form.addButton.clicked.connect(self.on_add_notes)
        self.form.settingsButton.clicked.connect(SearchSettingsWindow.open)

        self.update_search()

        # can be set in Qt5's designer, but code generated by pyuic4 fails
        if hasattr(self.form.pattern, 'setClearButtonEnabled'):  # Qt5
            self.form.pattern.setClearButtonEnabled(True)

        self.setWindowState(Qt.WindowMaximized)
        self.show()

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.close()

    def update_search(self):
        # get settings
        pattern = self.form.pattern.text()
        enable_edict = self.form.enableEDICT.isChecked()
        enable_deinflect = self.form.enableDeinflection.isChecked()
        enable_enamdict = self.form.enableENAMDICT.isChecked()
        # enable or disable deinflection depending on whether EDICT is enabled
        self.form.enableDeinflection.setEnabled(enable_edict)
        # update results
        word_search.search(pattern, enable_edict=enable_edict, enable_deinflect=enable_deinflect, enable_enamdict=enable_enamdict)
        # save settings for persistence
        mw.col.conf['searchedict_pattern'] = pattern
        mw.col.conf['searchedict_enableEDICT'] = enable_edict
        mw.col.conf['searchedict_enableDeinflect'] = enable_deinflect
        mw.col.conf['searchedict_enableENAMDICT'] = enable_enamdict
        mw.col.setMod()

    def on_add_notes(self):
        rows = self.form.resultTable.selectionModel().selectedRows()
        words = [
            word_search.words[index.row()]
            for index in rows
        ]
        add_notes(words)
